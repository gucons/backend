generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String?
  emailVerified     Boolean     @default(false)
  role              UserRole    @default(PENDING)
  authType          AuthType    @default(EMAIL)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  // Relations to roles
  consultantProfile Consultant?
  benchSalesProfile BenchSales?
  recruiterProfile  Recruiter?
  // Auth Sessions
  Session           Session[]
  // OAuth Accounts
  accounts          Account[]
}

enum UserRole {
  PENDING
  CONSULTANT
  BENCH_SALES
  RECRUITER
}

enum AuthType {
  EMAIL
  OAUTH
}

model Consultant {
  id             String      @id @default(uuid())
  userId         String      @unique
  user           User        @relation(fields: [userId], references: [id])
  // Basic Info
  firstName      String
  lastName       String
  contactEmail   String      @unique
  profilePicture String?
  phoneNumber    String?
  location       String?
  timeZone       String?
  // Add timestamps if needed
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  BenchSales     BenchSales? @relation(fields: [benchSalesId], references: [id])
  benchSalesId   String?
}

model BenchSales {
  id           String       @id @default(uuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  // Consultants under Bench Sales
  consultants  Consultant[]
  company      String? // Bench Sales company name
  contactEmail String?      @unique
  // Add timestamps if needed
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Recruiter {
  id           String       @id @default(uuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  company      String? // Recruiter company
  contactEmail String?      @unique
  jobPostings  JobPosting[]
  // Add timestamps if needed
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model JobPosting {
  id          String    @id @default(uuid())
  recruiterId String
  title       String
  description String
  location    String
  salaryRange String?
  // Relation to Recruiter
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  provider          Provider
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

enum Provider {
  GOOGLE
  LINKEDIN
}
